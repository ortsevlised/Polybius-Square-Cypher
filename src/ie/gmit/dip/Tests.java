package ie.gmit.dip;

import org.junit.Assert;
import org.junit.Test;

import static org.hamcrest.CoreMatchers.is;

public class Tests {

    Cypher cypher = new Cypher();

    @Test
    public void testConvertToMatrixValues() {
        Assert.assertThat(cypher.generateValuesForMatrix("OBJECT").toString(), is("FGVXXADFGVXG"));
    }

    @Test
    public void testGeneratePlainValuesFromMatrix() {
        Assert.assertThat(cypher.generateValueFromMatrix("FGVXXADFGVXG"), is("OBJECT"));
    }

    @Test
    public void testEncryptionSingleWord() {
        cypher.setKeyword("JAVA");
        cypher.setMessageToEncrypt("OBJECT");
        Assert.assertThat(cypher.encrypt(), is("GAVXFGFXGVDX"));
    }

    @Test
    public void testDecryptionSingleWord() {
        cypher.setKeyword("JAVA");
        cypher.setMessageToDecrypt("GAVXFGFXGVDX");
        Assert.assertThat(cypher.decrypt(), is("OBJECT"));
    }


    @Test
    public void testDecryptionLongText() {
        cypher.setKeyword("JAVA");
        cypher.setMessageToDecrypt
        Assert.assertThat(cypher.decrypt(), is("A\n" + "ABOUT\n" + "ABOVE\n" + "AFTER\n" + "AGAIN\n" + "AGO\n" + "ALL\n" + "ALMOST\n" + "ALONG\n" + "ALREADY\n" + "ALSO\n" + "ALTHOUGH\n" + "ALWAYS\n" + "AM\n" + "AMONG\n" + "AN\n" + "AND\n" + "ANOTHER\n" + "ANY\nANYBODY\nANYTHING\nANYWHERE\nARE\nARENT\nAROUND\nAS\nAT\nBACK\nELSE\nBE\nBEEN\nBEFORE\nBEING\nBELOW\nBENEATH\nBESIDE\nBETWEEN\nBEYOND\nBOTH\nEACH\nBUT\nBY\nCAN\nCANT\nCOULD\nCOULDNT\nDID\nDIDNT\nDO\nDOES\nDOESNT\nDOING\nDONE\nDONT\nDOWN\nDURING\nEITHER\nENOUGH\nEVEN\nEVER\nEVERY\nEVERYBODY\nEVERYONE\nEVERYTHING\nEVERYWHERE\nEXCEPT\nFAR\nFEW\nFEWER\nFIRST\nFOR\nFROM\nGET\nGETS\nGETTING\nGOT\nHAD\nHADNT\nHAS\nHASNT\nHAVE\nHAVENT\nHAVING\nHE\nHED\nHELL\nHENCE\nHER\nHERE\nHERS\nHERSELF\nHES\nHIM\nHIMSELF\nHIS\nHITHER\nHOW\nHOWEVER\nNEAR\nI\nID\nIF\nILL\nIM\nIN\nINTO\nIS\nIVE\nISNT\nIT\nITS\nITS\nITSELF\nLAST\nLESS\nMANY\nME\nMAY\nMIGHT\nMINE\nMORE\nMOST\nMUCH\nMUST\nMUSTNT\nMY\nMYSELF\nNEAR\nNEARBY\nNEARLY\nNEITHER\nNEVER\nNEXT\nNO\nNOBODY\nNONE\nNOONE\nNOTHING\nNOR\nNOT\nNOW\nNOWHERE\nOF\nOFF\nOFTEN\nON\nOR\nONCE\nONE\nONLY\nOTHER\nOTHERS\nOUGHT\nOUGHTNT\nOUR\nOURS\nOURSELVES\nOUT\nOVER\nQUITE\nRATHER\nROUND\nSECOND\nSHALL\nSHANT\nSHED\nSHE\nSHELL\nSHES\nSHOULD\nSHOULDNT\nSINCE\nSO\nSOME\nSOMEBODY\nSOMEONE\nSOMETHING\nSOMETIMES\nSOMEWHERE\nSOON\nSTILL\nSUCH\nTHAN\nTHAT\nTHATS\nTHE\nTHEIR\nTHEIRS\nTHEM\nTHEMSELVES\nTHESE\nTHEN\nTHENCE\nTHERE\nTHEREFORE\nTHEY\nTHEYD\nTHEYLL\nTHEYRE\nTHIS\nTHITHER\nTHOSE\nTHOUGH\nTHROUGH\nTHUS\nTILL\nTO\nTOWARDS\nTODAY\nTOMORROW\nTOO\nUNDER\nUNDERNEATH\nUNLESS\nUNTIL\nUP\nUS\nVERY\nWHEN\nWAS\nWASNT\nWE\nWED\nWELL\nWERE\nWERE\nWERENT\nWEVE\nWHAT\nWHENCE\nWHERE\nWHEREAS\nWHICH\nWHILE\nWHITHER\nWHO\nWHOM\nWHOSE\nWHY\nWILL\nWITH\nWITHIN\nWITHOUT\nWONT\nWOULD\nWOULDNT\nYES\nYESTERDAY\nYET\nYOU\nYOUR\nYOUD\nYOULL\nYOURE\nYOURS\nYOURSELF\nYOURSELVES\nYOUVE\nTHEYRE\nWEVE\nDONT\nTHATS\nBECAUSE"));
    }

    @Test
    public void testEncryptionWithSpaces() {
        cypher.setKeyword("JAVA");
        cypher.setMessageToEncrypt("im doing my homework");
        Assert.assertThat(cypher.encrypt(), is("VAGFAXDDGFDXVVDAGFGDXZFFZDADVGDFXADZFDFG"));
    }

    @Test
    public void testDecryptionWithSpaces() {
        cypher.setKeyword("JAVA");
        cypher.setMessageToDecrypt("VAGFAXDDGFDXVVDAGFGDXZFFZDADVGDFXADZFDFG");
        Assert.assertThat(cypher.decrypt(), is("IM DOING MY HOMEWORK"));
    }

    @Test
    public void testKeywordWithSpacesEncryption() {
        cypher.setKeyword("JAVA lala");
        cypher.setMessageToEncrypt("im doing my homework");
        Assert.assertThat(cypher.encrypt(), is("ZFZF VXDDFDFXDDXGDGGDVDDGFVAG FAFG AAAV XZDF "));
    }

    @Test
    public void testKeywordWithSpacesDecryption() {
        cypher.setKeyword("JAVA lala");
        cypher.setMessageToDecrypt("ZFZF VXDDFDFXDDXGDGGDVDDGFVAG FAFG AAAV XZDF ");
        Assert.assertThat(cypher.decrypt(), is("IM DOING MY HOMEWORK"));
    }

    @Test
    public void testEncryptionFromFile() {
        String message = Utils.parse("C:\\development\\Polybius square cypher\\src\\ie\\gmit\\dip\\resources\\IgnoreWords.txt");
        cypher.setKeyword("JAVA");
        cypher.setMessageToEncrypt(message);
        Assert.assertThat(cypher.encrypt(), is
    }


    @Test
    public void testEncryptionithSpaces() {
        cypher.setKeyword("java");
        String message = Utils.parse("C:\\development\\Polybius square cypher\\src\\ie\\gmit\\dip\\resources\\PictureOfDorianGray-Wilde.txt");
        cypher.setKeyword("java");
        cypher.setMessageToEncrypt(message);
        Assert.assertThat(cypher.encrypt(), is("VAGFAXDDGFDXVVDAGFGDXZFFZDADVGDFXADZFDFG"));
    }

    @Test
    public void testKeywordsWithSpacesDecryption() {
        cypher.setKeyword("java");
        cypher.setMessageToEncrypt(Utils.parse("C:\\development\\Polybius square cypher\\src\\ie\\gmit\\dip\\resources\\PictureOfDorianGray-Wilde.txt"));
        Utils.writeToFile("WildeEncrypted",cypher.encrypt());

        cypher.setKeyword("java");
        cypher.setMessageToDecrypt(Utils.parse("WildeEncrypted"));
        Utils.writeToFile("WildeDecrypted",cypher.decrypt());
    }
}
